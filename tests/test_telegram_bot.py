"""
Tests for TelegramBot
"""
import pytest
import os
import telegram
from unittest.mock import Mock, patch, mock_open, call
from bot.telegram_bot import TelegramBot
from services.quotes_service import Quote


class TestTelegramBot:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ TelegramBot"""
    
    @pytest.fixture
    def mock_quote(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫–æ–≤–æ–π —Ü–∏—Ç–∞—Ç—ã"""
        return Quote(
            text="Life is what happens when you're busy making other plans.",
            author="John Lennon"
        )
    
    @pytest.fixture
    def translated_text(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        return "–ñ–∏–∑–Ω—å - —ç—Ç–æ —Ç–æ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –∫–æ–≥–¥–∞ –≤—ã –∑–∞–Ω—è—Ç—ã —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ–º –¥—Ä—É–≥–∏—Ö –ø–ª–∞–Ω–æ–≤."
    
    @pytest.fixture
    def image_path(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é"""
        return "temp/test_image.jpg"
    
    def test_init(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞"""
        with patch('bot.telegram_bot.telegram.Bot') as mock_bot, \
             patch('bot.telegram_bot.TELEGRAM_BOT_TOKEN', 'test_token'), \
             patch('bot.telegram_bot.TELEGRAM_CHANNEL_ID', '@test_channel'), \
             patch('bot.telegram_bot.TELEGRAM_GROUP_ID', '@test_group'), \
             patch('bot.telegram_bot.logger') as mock_logger:
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
            bot = TelegramBot()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ telegram.Bot –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
            mock_bot.assert_called_once_with(token='test_token')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Ç—Ä–∏–±—É—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            assert bot.channel_id == '@test_channel'
            assert bot.group_id == '@test_group'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –∑–∞–ø–∏—Å–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥
            mock_logger.info.assert_called_once_with(
                "Telegram bot initialized for channel @test_channel and group @test_group"
            )
    
    def test_send_quote_no_translation_no_image(self, mock_quote):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ü–∏—Ç–∞—Ç—ã –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        with patch('bot.telegram_bot.telegram.Bot') as mock_bot_class, \
             patch('bot.telegram_bot.TELEGRAM_BOT_TOKEN', 'test_token'), \
             patch('bot.telegram_bot.TELEGRAM_CHANNEL_ID', '@test_channel'), \
             patch('bot.telegram_bot.TELEGRAM_GROUP_ID', None), \
             patch('bot.telegram_bot.logger') as mock_logger:
             
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
            mock_bot = Mock()
            mock_bot_class.return_value = mock_bot
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—à–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
            bot = TelegramBot()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–∏—Ç–∞—Ç—É
            result = bot.send_quote(quote=mock_quote)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            expected_message = f'üî• *"Life is what happens when you\'re busy making other plans."*\n\n'
            expected_message += f'üë§ _John Lennon_'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–∑–æ–≤ bot.send_message –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            mock_bot.send_message.assert_called_once_with(
                chat_id='@test_channel',
                text=expected_message,
                parse_mode=telegram.ParseMode.MARKDOWN
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ send_photo –Ω–µ –≤—ã–∑—ã–≤–∞–ª—Å—è
            mock_bot.send_photo.assert_not_called()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            mock_logger.info.assert_any_call("–¶–∏—Ç–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ @test_channel")
            
            # –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å True –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
            assert result is True
    
    def test_send_quote_with_translation_no_image(self, mock_quote, translated_text):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ü–∏—Ç–∞—Ç—ã —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º, –Ω–æ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        with patch('bot.telegram_bot.telegram.Bot') as mock_bot_class, \
             patch('bot.telegram_bot.TELEGRAM_BOT_TOKEN', 'test_token'), \
             patch('bot.telegram_bot.TELEGRAM_CHANNEL_ID', '@test_channel'), \
             patch('bot.telegram_bot.TELEGRAM_GROUP_ID', '@test_group'), \
             patch('bot.telegram_bot.logger') as mock_logger:
             
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
            mock_bot = Mock()
            mock_bot_class.return_value = mock_bot
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—à–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
            bot = TelegramBot()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–∏—Ç–∞—Ç—É —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
            result = bot.send_quote(quote=mock_quote, translated_text=translated_text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            expected_message = f'üî• *{translated_text}*\n\n'
            expected_message += f'üåê "Life is what happens when you\'re busy making other plans."\n\n'
            expected_message += f'üë§ _John Lennon_'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–∑–æ–≤ bot.send_message –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–≤–∞–∂–¥—ã (–¥–ª—è –∫–∞–Ω–∞–ª–∞ –∏ –≥—Ä—É–ø–ø—ã)
            assert mock_bot.send_message.call_count == 2
            mock_bot.send_message.assert_has_calls([
                call(
                    chat_id='@test_channel',
                    text=expected_message,
                    parse_mode=telegram.ParseMode.MARKDOWN
                ),
                call(
                    chat_id='@test_group',
                    text=expected_message,
                    parse_mode=telegram.ParseMode.MARKDOWN
                )
            ])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ send_photo –Ω–µ –≤—ã–∑—ã–≤–∞–ª—Å—è
            mock_bot.send_photo.assert_not_called()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            mock_logger.info.assert_any_call("–¶–∏—Ç–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ @test_channel")
            mock_logger.info.assert_any_call("–¶–∏—Ç–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ @test_group")
            
            # –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å True –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
            assert result is True
    
    def test_send_quote_with_image(self, mock_quote, image_path):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ü–∏—Ç–∞—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
        with patch('bot.telegram_bot.telegram.Bot') as mock_bot_class, \
             patch('bot.telegram_bot.TELEGRAM_BOT_TOKEN', 'test_token'), \
             patch('bot.telegram_bot.TELEGRAM_CHANNEL_ID', '@test_channel'), \
             patch('bot.telegram_bot.TELEGRAM_GROUP_ID', None), \
             patch('bot.telegram_bot.os.path.exists', return_value=True), \
             patch('bot.telegram_bot.open', mock_open(), create=True) as mock_file, \
             patch('bot.telegram_bot.os.unlink') as mock_unlink, \
             patch('bot.telegram_bot.logger') as mock_logger:
             
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
            mock_bot = Mock()
            mock_bot_class.return_value = mock_bot
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—à–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
            bot = TelegramBot()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–∏—Ç–∞—Ç—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            result = bot.send_quote(quote=mock_quote, image_path=image_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            expected_message = f'üî• *"Life is what happens when you\'re busy making other plans."*\n\n'
            expected_message += f'üë§ _John Lennon_'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –±—ã–ª –æ—Ç–∫—Ä—ã—Ç
            mock_file.assert_called_with(image_path, 'rb')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–∑–æ–≤ bot.send_photo –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            mock_bot.send_photo.assert_called_once()
            args, kwargs = mock_bot.send_photo.call_args
            assert kwargs['chat_id'] == '@test_channel'
            assert kwargs['caption'] == expected_message
            assert kwargs['parse_mode'] == telegram.ParseMode.MARKDOWN
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ send_message –Ω–µ –≤—ã–∑—ã–≤–∞–ª—Å—è
            mock_bot.send_message.assert_not_called()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –±—ã–ª —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            mock_unlink.assert_called_once_with(image_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            mock_logger.info.assert_any_call("–¶–∏—Ç–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ @test_channel")
            mock_logger.info.assert_any_call(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {image_path} —É–¥–∞–ª–µ–Ω")
            
            # –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å True –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
            assert result is True
    
    def test_send_quote_send_message_error(self, mock_quote):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        with patch('bot.telegram_bot.telegram.Bot') as mock_bot_class, \
             patch('bot.telegram_bot.TELEGRAM_BOT_TOKEN', 'test_token'), \
             patch('bot.telegram_bot.TELEGRAM_CHANNEL_ID', '@test_channel'), \
             patch('bot.telegram_bot.TELEGRAM_GROUP_ID', None), \
             patch('bot.telegram_bot.logger') as mock_logger:
             
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ —Å –æ—à–∏–±–∫–æ–π –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
            mock_bot = Mock()
            mock_bot.send_message.side_effect = Exception("Error sending message")
            mock_bot_class.return_value = mock_bot
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—à–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
            bot = TelegramBot()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–∏—Ç–∞—Ç—É 
            result = bot.send_quote(quote=mock_quote)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            mock_logger.error.assert_any_call("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ @test_channel: Error sending message")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ True (–æ–Ω–∞ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏–ª–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ü–∏–∫–ª–µ)
            assert result is True
    
    def test_send_quote_general_error(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—â–µ–π –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ü–∏—Ç–∞—Ç—ã"""
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç: –º—ã —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –∞—Ç—Ä–∏–±—É—Ç–∞–º
        broken_quote = "not a Quote object"
        
        with patch('bot.telegram_bot.telegram.Bot') as mock_bot_class, \
             patch('bot.telegram_bot.TELEGRAM_BOT_TOKEN', 'test_token'), \
             patch('bot.telegram_bot.TELEGRAM_CHANNEL_ID', '@test_channel'), \
             patch('bot.telegram_bot.TELEGRAM_GROUP_ID', None), \
             patch('bot.telegram_bot.logger') as mock_logger:
              
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
            mock_bot = Mock()
            mock_bot_class.return_value = mock_bot
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—à–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
            bot = TelegramBot()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "—Å–ª–æ–º–∞–Ω–Ω—É—é" —Ü–∏—Ç–∞—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É –∞—Ç—Ä–∏–±—É—Ç–∞
            result = bot.send_quote(quote=broken_quote)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ False –ø—Ä–∏ –æ–±—â–µ–π –æ—à–∏–±–∫–µ
            assert result is False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –æ—à–∏–±–∫–∞ –≤ –ª–æ–≥
            assert mock_logger.error.call_count > 0
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–∑–æ–≤ –ª–æ–≥–≥–µ—Ä–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            last_call = mock_logger.error.call_args_list[-1]
            error_message = last_call[0][0]
            assert "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ü–∏—Ç–∞—Ç—ã –≤ Telegram" in error_message
    
    def test_send_quote_image_unlink_error(self, mock_quote, image_path):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        with patch('bot.telegram_bot.telegram.Bot') as mock_bot_class, \
             patch('bot.telegram_bot.TELEGRAM_BOT_TOKEN', 'test_token'), \
             patch('bot.telegram_bot.TELEGRAM_CHANNEL_ID', '@test_channel'), \
             patch('bot.telegram_bot.TELEGRAM_GROUP_ID', None), \
             patch('bot.telegram_bot.os.path.exists', return_value=True), \
             patch('bot.telegram_bot.open', mock_open(), create=True), \
             patch('bot.telegram_bot.os.unlink', side_effect=Exception("Error deleting file")), \
             patch('bot.telegram_bot.logger') as mock_logger:
             
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
            mock_bot = Mock()
            mock_bot_class.return_value = mock_bot
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—à–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
            bot = TelegramBot()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–∏—Ç–∞—Ç—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            result = bot.send_quote(quote=mock_quote, image_path=image_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞
            mock_logger.warning.assert_called_once_with(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {image_path}: Error deleting file"
            )
            
            # –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å True, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ (–æ—Ç–ø—Ä–∞–≤–∫–∞) –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
            assert result is True
    
    def test_send_quote_nonexistent_image(self, mock_quote, image_path):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ü–∏—Ç–∞—Ç—ã —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
        with patch('bot.telegram_bot.telegram.Bot') as mock_bot_class, \
             patch('bot.telegram_bot.TELEGRAM_BOT_TOKEN', 'test_token'), \
             patch('bot.telegram_bot.TELEGRAM_CHANNEL_ID', '@test_channel'), \
             patch('bot.telegram_bot.TELEGRAM_GROUP_ID', None), \
             patch('bot.telegram_bot.os.path.exists', return_value=False), \
             patch('bot.telegram_bot.logger') as mock_logger:
             
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
            mock_bot = Mock()
            mock_bot_class.return_value = mock_bot
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—à–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
            bot = TelegramBot()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–∏—Ç–∞—Ç—É —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            result = bot.send_quote(quote=mock_quote, image_path=image_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
            mock_bot.send_message.assert_called_once()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –±—ã–ª–æ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
            mock_bot.send_photo.assert_not_called()
            
            # –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å True
            assert result is True 