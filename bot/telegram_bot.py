import logging
import os
import telegram
from config.config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHANNEL_ID, TELEGRAM_GROUP_ID
from services.quotes_service import Quote

logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self):
        self.bot = telegram.Bot(token=TELEGRAM_BOT_TOKEN)
        self.channel_id = TELEGRAM_CHANNEL_ID
        self.group_id = TELEGRAM_GROUP_ID
        logger.info(f"Telegram bot initialized for channel {self.channel_id} and group {self.group_id}")
        
    def send_quote(self, quote: Quote, translated_text: str = None, image_path: str = None):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ü–∏—Ç–∞—Ç—É –≤ Telegram –∫–∞–Ω–∞–ª –∏ –≥—Ä—É–ø–ø—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        
        :param quote: –û–±—ä–µ–∫—Ç —Ü–∏—Ç–∞—Ç—ã
        :param translated_text: –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã
        :param image_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
        :return: True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            if translated_text:
                message = f'üî• *{translated_text}*\n\n'
                message += f'üåê "{quote.text}"\n\n'
                message += f'üë§ _{quote.author}_'
            else:
                message = f'üî• *"{quote.text}"*\n\n'
                message += f'üë§ _{quote.author}_'
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª –∏ –≥—Ä—É–ø–ø—É
            destinations = [self.channel_id]
            if self.group_id:
                destinations.append(self.group_id)
                
            for dest_id in destinations:
                try:
                    if image_path and os.path.exists(image_path):
                        with open(image_path, 'rb') as photo:
                            self.bot.send_photo(
                                chat_id=dest_id,
                                photo=photo,
                                caption=message,
                                parse_mode=telegram.ParseMode.MARKDOWN
                            )
                    else:
                        self.bot.send_message(
                            chat_id=dest_id,
                            text=message,
                            parse_mode=telegram.ParseMode.MARKDOWN
                        )
                    logger.info(f"–¶–∏—Ç–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ {dest_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {dest_id}: {e}")
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –≤—Å–µ—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
            if image_path and os.path.exists(image_path):
                try:
                    os.unlink(image_path)
                    logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {image_path} —É–¥–∞–ª–µ–Ω")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {image_path}: {e}")
                    
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ü–∏—Ç–∞—Ç—ã –≤ Telegram: {e}")
            return False 